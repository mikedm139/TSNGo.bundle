import string
import urllib

LIVE_STREAM_FORMAT = "http://nlds{server}.cdnak.neulion.com/nlds/nhl/{streamName}/as/live/{streamName}_hd_{q}.m3u8"
REPLAY_STREAM_FORMAT = "http://nlds{server}.cdnak.neulion.com/nlds_vod/nhl/vod/{year}/{month}/{day}/{gameNumber}/{type}_{gameNumber}_{away}_{home}_1314_{awayHome}_{fullShort}_{replayNumber}_{q}_ipad.mp4.m3u8"
HIGHLIGHT_FORMAT = "http://nhl.cdnllnwnl.neulion.net/u/nhlmobile/vod/nhl/{year}/{month}/{day}/{gameNumber}/{type}_{gameNumber}_{away}_{home}_1314_{awayHome}_discrete_{key}_{highlightType}_{highlightNumber}_{q}.mp4"
QUALITY_MARKER = "{q}" 

####################################################################################################
def MetadataObjectForURL(url):
		
	Log.Info("Generate TSN metadata for " + url)
		
	# "http://ams-lp{server}.9c9media.com/hls-live/livepkgr/_definst_/liveeventNoDRM/tsnOpen{quality}.m3u8?title=TSN1&desc=ShowTitle&logo=iconurl"
	data = ParseQueryString(url)
	#Log.Debug("data: " + str(data))
	
	title = data["title"]	
	desc = urllib.unquote(data["desc"])
	logo = data["logo"]
	
    # Construct a metadata item
	return VideoClipObject(
		title = title,
		thumb=logo,
		summary = desc
	)

####################################################################################################
@deferred # tells plex not to call this until the link is clicked
def MediaObjectsForURL(url):
	
	# some clients encode the url, so the quality tag is messed up
	url = url.replace("%7B", "{").replace("%7D", "}")
	
	Log.Debug("Live URL: " + url)
	
	url8 = url.replace("{quality}", "8")
	url7 = url.replace("{quality}", "7")
	url6 = url.replace("{quality}", "6")
	url5 = url.replace("{quality}", "5")
	url4 = url.replace("{quality}", "4")
	url3 = url.replace("{quality}", "3")
	url2 = url.replace("{quality}", "2")
	url1 = url.replace("{quality}", "1")
			
	client = Client.Platform
	Log.Info("Playback Client: " + str(Client.Platform))
	
	# default playback method:
	callback = PlayHLS
	
	# some clients need to use a different playback method
	if client == "Android":
		callback = PlayHLSIndirect
		
	#if client == "Roku":
	#	callback = PlayHLSRoku
				
	if client == "iOS":
		callback = PlayHLSIndirect
		
	
	# build media object list
	# Roku has a stupid bug in the latest firmware, which breaks support for single bitrate HLS playlists.  The workaround (hopefully temporary), is to set the bitrate to 0.
	if client == "Roku":
		Log.Debug("Roku workaround, setting bitrate zero")
		return [
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url8)))],
				bitrate = 0,
				video_resolution = 720
			)
		]
		
	else:
		Log.Debug("Creating MediaObjects")
		return [
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url8)))],
				bitrate = 2048,
				video_resolution = 720
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url7)))],
				bitrate = 1856,
				video_resolution = 540
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url6)))],
				bitrate = 1536,
				video_resolution = 540
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url5)))],
				bitrate = 1280,
				video_resolution = 360
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url4)))],
				bitrate = 896,
				video_resolution = 360
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url3)))],
				bitrate = 640,
				video_resolution = 360
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url2)))],
				bitrate = 480,
				video_resolution = 360
			),
			MediaObject(
				optimized_for_streaming=True,
				parts = [PartObject(key=HTTPLiveStreamURL(Callback(callback, url=url1)))],
				bitrate = 300,
				video_resolution = 240
			)
		]



####################################################################################################
	

@indirect
def PlayHLSIndirect(url):
	Log.Debug("IndirectResponse: " + url)
	return IndirectResponse(VideoClipObject, key = HTTPLiveStreamURL(url))
		
	
def PlayHLS(url):
	Log.Debug("PlayHLS: " + url)
		
	playlist = HTTP.Request(url, follow_redirects=False).content

	index = string.rfind(url, ".com/")
	playlist_base = url[0:index+5]
	Log.Debug("base: " + playlist_base)

	new_playlist = ""

	
	for line in playlist.splitlines():
		if line.startswith('#'):
			# take it as is
			Log.Debug("line: " + line)
			new_playlist = new_playlist + line + "\n"
		else:
			line = playlist_base + line.replace("../", "")
			Log.Debug("line: " + line)
			new_playlist = new_playlist + line + "\n"

	return new_playlist
		
def ParseQueryString(url):	
	queryStart = url.find("?") + 1
	query = url[queryStart:len(url)]
	Log.Debug("Query string: " + query)
	parts = query.split("&")	
	data = {}
	
	for part in parts:
		kvp = part.split("=")
		key = kvp[0]
		value = kvp[1]
		data[key] = value

	return data
	

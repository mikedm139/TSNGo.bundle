import string

LIVE_STREAM_FORMAT = "http://nlds{server}.cdnak.neulion.com/nlds/nhl/{streamName}/as/live/{streamName}_hd_{q}.m3u8"
REPLAY_STREAM_FORMAT = "http://nlds{server}.cdnak.neulion.com/nlds_vod/nhl/vod/{year}/{month}/{day}/{gameNumber}/{type}_{gameNumber}_{away}_{home}_1314_{awayHome}_{fullShort}_{replayNumber}_{q}_ipad.mp4.m3u8"
HIGHLIGHT_FORMAT = "http://nhl.cdnllnwnl.neulion.net/u/nhlmobile/vod/nhl/{year}/{month}/{day}/{gameNumber}/{type}_{gameNumber}_{away}_{home}_1314_{awayHome}_discrete_{key}_{highlightType}_{highlightNumber}_{q}.mp4"
QUALITY_MARKER = "{q}" 

####################################################################################################
def MetadataObjectForURL(url):
		
	Log.Info("Generate TSN metadata for " + url)
		
	# "http://ams-lp{server}.9c9media.com/hls-live/livepkgr/_definst_/liveeventNoDRM/tsnOpen{quality}.m3u8?title=TSN1&logo=ICON_TSN1"
	data = ParseQueryString(url)
	#Log.Debug("data: " + str(data))
	
	title = data["title"]	
	#desc = data["summary"]
	logo = R(data["logo"])
	
    # Construct a metadata item
	return VideoClipObject(
		title = title,
		thumb=logo,
		summary = title
	)

####################################################################################################
@deferred # tells plex not to call this until the link is clicked
def MediaObjectsForURL(url):

	data = ParseQueryString(url)
	
	game = GetGameJson(url)
	
	type = data["type"]
	
	Log.Debug("Media object type: " + type)
	
	if type == "replayFullHome" or type == "replayFullAway" or type == "replayShortHome" or type == "replayShortAway":
		#return BuildReplayObject(game, data)
		return BuildStream(type, game)
	
	if type == "liveHome" or type == "liveAway":
		#return BuildLiveStream(type, game)
		return BuildStream(type, game)
		
	if type == "highlight":
		return BuildHighlightObject(game, data)
		
	#shouldn't be here
	raise Exception("Could not build video objects (invalid type)")



####################################################################################################
def BuildLiveStream(type, game):
	
	url = ""
	
	if type == "liveHome":
		url = game["gameStreams"]["ipad"]["home"]["live"]["bitrate0"]
	
	if type == "liveAway":
		url = game["gameStreams"]["ipad"]["away"]["live"]["bitrate0"]
	
	Log.Debug("Live URL: " + url)
	
	return [
		 MediaObject(
			optimized_for_streaming=True,
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayHLS2, url=url)))],
		)
	]
	
def BuildStream(type, game):
	
	url = ""
	
	homeAway = ""
	source = ""
	
	if type == "liveHome" or type == "replayFullHome" or type == "replayShortHome":
		homeAway = "home"
	else:
		homeAway = "away"
		
	if type == "liveHome" or type == "liveAway":
		source = "live"
	elif type == "replayShortHome" or type == "replayShortAway":
		source = "vod-condensed"
	elif type == "replayFullHome" or type == "replayFullAway":
		source = "vod-whole"
	
	url = game["gameStreams"]["ipad"][homeAway][source]["bitrate0"]
	
	Log.Debug("Live URL: " + url)
	
	return [
		 MediaObject(
			optimized_for_streaming=True,
			parts = [PartObject(key=HTTPLiveStreamURL(Callback(PlayHLS2, url=url)))],
		)
	]
	
def PlayHLS2(url):
	# this seems to work on the iOS clients, and it's way easier...
	# if only we could set the user-agent on the redirect to player.
	return Redirect(url)
	
def PlayHLS(url):
	Log.Debug("service PlayVideo: " + url)
	
	playlist = HTTP.Request(url, follow_redirects=False).content

	index = string.rfind(url, "/")
	playlist_base = url[0:index+1]
	Log.Debug("base: " + playlist_base)

	new_playlist = ""

	
	for line in playlist.splitlines():
		if line.startswith('#'):
			# take it as is
			Log.Debug("line: " + line)
			new_playlist = new_playlist + line + "\n"
		else:
			line = playlist_base + line
			Log.Debug("line: " + line)
			new_playlist = new_playlist + line + "\n"

	return new_playlist
	
def GetGameJson(url):	
	return JSON.ObjectFromURL(url)
	
def ParseQueryString(url):	
	queryStart = url.find("?") + 1
	query = url[queryStart:len(url)]
	Log.Debug("Query string: " + query)
	parts = query.split("&")	
	data = {}
	
	for part in parts:
		kvp = part.split("=")
		key = kvp[0]
		value = kvp[1]
		data[key] = value

	return data
	

def BuildReplayObject(game, data):
	year = game["easternStart"][0:4]
	month = game["easternStart"][5:7]
	day = game["easternStart"][8:10]
	gameType = game["t"].lstrip("0") # not zero padded
	gameNumber = game["gn"].lstrip("0") # not zero padded
	quality = data["q"]
	type = data["type"]
	
	if type == "replayFullHome":
		awayHome = "h"
		fullShort = "whole"
		server = game["h"]["replayFull"]
		replayNumber = game["h"]["replayFullNumber"]
		
	elif type == "replayFullAway":
		awayHome = "a"
		fullShort = "whole"
		server = game["a"]["replayFull"]
		replayNumber = game["a"]["replayFullNumber"]
		
	elif type == "replayShortHome":
		awayHome = "h"
		fullShort = "condensed"
		server = game["h"]["replayShort"]
		replayNumber = game["h"]["replayShortNumber"]
		
	elif type == "replayShortAway":
		awayHome = "a"
		fullShort = "condensed"
		server = game["a"]["replayShort"]
		replayNumber = game["a"]["replayShortNumber"]
		
	videoUrl = REPLAY_STREAM_FORMAT.replace("{year}", year).replace("{month}", month).replace("{day}", day)
	videoUrl = videoUrl.replace("{type}", gameType).replace("{gameNumber}", gameNumber).replace("{away}", game["a"]["ab"]).replace("{home}", game["h"]["ab"])
	videoUrl = videoUrl.replace("{awayHome}", awayHome).replace("{fullShort}", fullShort).replace("{q}", quality)
	videoUrl = videoUrl.replace("{server}", server).replace("{replayNumber}", str(replayNumber))
	
	Log.Debug("Replay Url: " + videoUrl) 
		
	return [
		 MediaObject(
			parts = [PartObject(key = Callback(PlayHLS, url = videoUrl))]
		)
	] 

	
def BuildHighlightObject(game, data):
	Log.Debug("Highlight")
	
	year = game["easternStart"][0:4]
	month = game["easternStart"][5:7]
	day = game["easternStart"][8:10]
	gameType = game["t"].lstrip("0") # not zero padded
	gameNumber = game["gn"].lstrip("0") # not zero padded
	quality = data["q"]
	type = data["type"]
	key = data["key"]
	
	#find the highlight
	for item in game["pbp"]:
		if item["key"] == key:
			pbp = item
			break
			
	if pbp == None:
		raise Exception("could not find pbp with key " + key)
	
	if data["home"] == "True":
		highlightType = pbp["homeType"]
		highlightNumber = pbp["homeNumber"]
		awayHome = "h"
	else:
		highlightType = pbp["awayType"]
		highlightNumber = pbp["awayNumber"]
		awayHome = "a"
		
		
	videoUrl = HIGHLIGHT_FORMAT.replace("{year}", year).replace("{month}", month).replace("{day}", day)
	videoUrl = videoUrl.replace("{type}", gameType).replace("{gameNumber}", gameNumber).replace("{away}", game["a"]["ab"]).replace("{home}", game["h"]["ab"])
	videoUrl = videoUrl.replace("{awayHome}", awayHome).replace("{q}", quality).replace("{key}", key)
	videoUrl = videoUrl.replace("{highlightNumber}", str(highlightNumber)).replace("{highlightType}", highlightType)
	
	Log.Debug("Highlight Url: " + videoUrl) 
		
	return [
		 MediaObject(
			parts = [PartObject(key = Callback(PlayHighlight, url = videoUrl))]
		)
	] 

	
def PlayHighlight(url):
	# this seems to work on the iOS clients, and it's way easier...
	# if only we could set the user-agent on the redirect to player.
	return Redirect(url)